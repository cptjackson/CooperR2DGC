library(devtools)
library(CooperR2DGC)
library(CooperR2DGC)
plot.new()
text(0.5,1,"Input Sample\nChromatof File Paths", cex=0.8)
plot.new()
text(0.5,1,"Input Sample\nChromatof File Paths", cex=0.8)
arrows(0.5,0.96,0.5,0.905,length=0.1, lwd=2)
rect(0.3,0.75,0.7,0.9, col="springgreen3")
text(0.5,0.83,"Optional: Ion Filtering\n(FindProblemIons)", cex=0.8)
arrows(0.5,0.745,0.5,0.705,length=0.1, lwd=2)
rect(0.3,0.55,0.7,0.7, col="steelblue2")
text(0.5,0.63,"Optional: Intra-Sample\nPeak Compression\n(PrecompressFiles)", cex=0.8)
arrows(0.5,0.545,0.5,0.505,length=0.1, lwd=2)
rect(0.3,0.3,0.7,0.5, col="indianred1")
text(0.5,0.4,"Multi-Sample Peak\nAlignment and\nMetabolite Identification\n(ConsensusAlign)", cex=0.8)
rect(0.8,0.5,1,0.65, col="plum3")
text(0.9,0.58,"Standard Library\nCreation\n(MakeReference)", cex=0.69)
text(0.9,0.77,"Input Metabolite\nStandard\nChromatof File Paths", cex=0.8)
arrows(0.9,0.71,0.9,0.655,length=0.1, lwd=2)
arrows(0.9,0.495,0.705,0.4,length=0.1, lwd=2)
arrows(0.5,0.295,0.5,0.255,length=0.1, lwd=2)
rect(-0.02,0.03,1.02,0.25,col="snow2")
text(0.5,0.225,"Output List")
rect(0,0.05,0.3,0.2, col="wheat1")
text(0.15,0.13,"Peak Alignment Table", cex=0.8)
rect(0.35,0.05,0.65,0.2, col="khaki2")
text(0.5,0.13,"Peak Info Table", cex=0.8)
rect(0.7,0.05,1,0.2, col="lightgoldenrod")
text(0.85,0.13,"Incongruent Quant\nMass List", cex=0.8)
text(0.5, 0, "Figure 2. Basic Workflow. Functions shown in parenthesis",cex=0.8)
library(CooperR2DGC)
library(CooperR2DGC)
library(CooperR2DGC)
FAME_Frame=system.file("extdata", "FIND_FAME_FRAME.txt", package="CooperR2DGC")
numCores=4
RT1Penalty=1
RT2Penalty=10
similarityCutoffWarningThreshold=85
inputFileList="~/Downloads/R2DGC_QuickStart/"
FAMES<-read.table(FAME_Frame,sep="\t",header=T)
FAMES[,2]<-as.character(FAMES[,2])
RTSplit<-data.frame(strsplit(FAMES[,2], " , "), stringsAsFactors = F)
RTSplit[1,]<-gsub("\"", "", RTSplit[1,])
RTSplit[2,]<-gsub("\"", "", RTSplit[2,])
FAMES[,"RT1"]<-as.numeric(t(RTSplit[1,]))
FAMES[,"RT2"]<-as.numeric(t(RTSplit[2,]))
FAMES[,3]<-as.character(FAMES[,3])
FAMESFileSplit<-split(FAMES,1:nrow(FAMES))
FAMESspectraSplit<-lapply(FAMESFileSplit, function(a) strsplit(a[[3]]," "))
FAMESspectraSplit<-lapply(FAMESspectraSplit, function(b) lapply(b, function(c) strsplit(c,":")))
FAMESspectraSplit<-lapply(FAMESspectraSplit, function(d) t(matrix(unlist(d),nrow=2)))
FAMESspectraSplit<-lapply(FAMESspectraSplit, function(d) d[order(d[,1]),])
FAMESspectraSplit<-lapply(FAMESspectraSplit, function(d) apply(d,2,as.numeric))
File<-inputFileList[1]
inputFileList=paste0("~/Downloads/R2DGC_QuickStart/",list.files("~/Downloads/R2DGC_QuickStart/"))
File<-inputFileList[1]
currentRawFile<-read.table(File, sep="\t", fill=T, quote="",strip.white = T, stringsAsFactors = F,header=T)
currentRawFile<- currentRawFile[,c(1,2,3,5,4)]
View(currentRawFile)
currentRawFile<-read.table(File, sep="\t", fill=T, quote="",strip.white = T, stringsAsFactors = F,header=T)
currentRawFile[,4]<-as.character(currentRawFile[,4])
currentRawFile<-currentRawFile[which(!is.na(currentRawFile[,3])&nchar(currentRawFile[,4])!=0),]
currentRawFile[,2]<-as.character(currentRawFile[,2])
RTSplit<-data.frame(strsplit(currentRawFile[,2], " , "), stringsAsFactors = F)
RTSplit[1,]<-gsub("\"", "", RTSplit[1,])
RTSplit[2,]<-gsub("\"", "", RTSplit[2,])
currentRawFile[,"RT1"]<-as.numeric(t(RTSplit[1,]))
currentRawFile[,"RT2"]<-as.numeric(t(RTSplit[2,]))
uniqueIndex<-data.frame(paste(currentRawFile[,1], currentRawFile[,2], currentRawFile[,3]))
currentRawFile<-currentRawFile[which(!duplicated(uniqueIndex)),]
row.names(currentRawFile)<-c(1:nrow(currentRawFile))
currentRawFileSplit<-split(currentRawFile,1:nrow(currentRawFile))
spectraSplit<-lapply(currentRawFileSplit, function(a) strsplit(a[[4]]," "))
spectraSplit<-lapply(spectraSplit, function(b) lapply(b, function(c) strsplit(c,":")))
spectraSplit<-lapply(spectraSplit, function(d) t(matrix(unlist(d),nrow=2)))
spectraSplit<-lapply(spectraSplit, function(d) d[order(d[,1]),])
spectraSplit<-lapply(spectraSplit, function(d) apply(d,2,as.numeric))
SimilarityScores<-mclapply(spectraSplit, function(e) lapply(FAMESspectraSplit, function(d) ((e[,2]%*%d[,2])/(sqrt(sum(e[,2]*e[,2]))*sqrt(sum(d[,2]*d[,2]))))*100), mc.cores=numCores)
SimilarityMatrix<-matrix(unlist(SimilarityScores), nrow=nrow(FAMES))
library(parallel)
for(File in inputFileList){
print(File)
currentRawFile<-read.table(File, sep="\t", fill=T, quote="",strip.white = T, stringsAsFactors = F,header=T)
currentRawFile[,4]<-as.character(currentRawFile[,4])
currentRawFile<-currentRawFile[which(!is.na(currentRawFile[,3])&nchar(currentRawFile[,4])!=0),]
currentRawFile[,2]<-as.character(currentRawFile[,2])
#Parse retention times
RTSplit<-data.frame(strsplit(currentRawFile[,2], " , "), stringsAsFactors = F)
RTSplit[1,]<-gsub("\"", "", RTSplit[1,])
RTSplit[2,]<-gsub("\"", "", RTSplit[2,])
currentRawFile[,"RT1"]<-as.numeric(t(RTSplit[1,]))
currentRawFile[,"RT2"]<-as.numeric(t(RTSplit[2,]))
#Remove identical metabolite rows
uniqueIndex<-data.frame(paste(currentRawFile[,1], currentRawFile[,2], currentRawFile[,3]))
currentRawFile<-currentRawFile[which(!duplicated(uniqueIndex)),]
row.names(currentRawFile)<-c(1:nrow(currentRawFile))
#Parse metabolite spectra into a list
currentRawFileSplit<-split(currentRawFile,1:nrow(currentRawFile))
spectraSplit<-lapply(currentRawFileSplit, function(a) strsplit(a[[4]]," "))
spectraSplit<-lapply(spectraSplit, function(b) lapply(b, function(c) strsplit(c,":")))
spectraSplit<-lapply(spectraSplit, function(d) t(matrix(unlist(d),nrow=2)))
spectraSplit<-lapply(spectraSplit, function(d) d[order(d[,1]),])
spectraSplit<-lapply(spectraSplit, function(d) apply(d,2,as.numeric))
#CalcSims
SimilarityScores<-mclapply(spectraSplit, function(e) lapply(FAMESspectraSplit, function(d) ((e[,2]%*%d[,2])/(sqrt(sum(e[,2]*e[,2]))*sqrt(sum(d[,2]*d[,2]))))*100), mc.cores=numCores)
SimilarityMatrix<-matrix(unlist(SimilarityScores), nrow=nrow(FAMES))
#Calculate pairwise RT penalties for each current file metabolite and seed file metabolites
RT1Index<-matrix(unlist(lapply(currentRawFile[,6],function(x) abs(x-FAMES[,4])*RT1Penalty)),nrow=nrow(FAMES))
RT2Index<-matrix(unlist(lapply(currentRawFile[,7],function(x) abs(x-FAMES[,5])*RT2Penalty)),nrow=nrow(FAMES))
SimilarityMatrix<-SimilarityMatrix-RT1Index-RT2Index
if(sum(apply(SimilarityMatrix,1,max)<85)>1){
message(paste0("Potential Problem Match: ", FAMES[which(apply(SimilarityMatrix,1,max)<similarityCutoffWarningThreshold),1], "  "))
}
currentRawFile[apply(SimilarityMatrix,1,which.max),1]<-as.character(FAMES[,1])
write.table(currentRawFile[,c(1:5)], paste0(File,"_FAME_appended.txt"),sep="\t",row.names=F,quote=F)
}
similarityCutoffWarningThreshold=80
for(File in inputFileList){
print(File)
currentRawFile<-read.table(File, sep="\t", fill=T, quote="",strip.white = T, stringsAsFactors = F,header=T)
currentRawFile[,4]<-as.character(currentRawFile[,4])
currentRawFile<-currentRawFile[which(!is.na(currentRawFile[,3])&nchar(currentRawFile[,4])!=0),]
currentRawFile[,2]<-as.character(currentRawFile[,2])
#Parse retention times
RTSplit<-data.frame(strsplit(currentRawFile[,2], " , "), stringsAsFactors = F)
RTSplit[1,]<-gsub("\"", "", RTSplit[1,])
RTSplit[2,]<-gsub("\"", "", RTSplit[2,])
currentRawFile[,"RT1"]<-as.numeric(t(RTSplit[1,]))
currentRawFile[,"RT2"]<-as.numeric(t(RTSplit[2,]))
#Remove identical metabolite rows
uniqueIndex<-data.frame(paste(currentRawFile[,1], currentRawFile[,2], currentRawFile[,3]))
currentRawFile<-currentRawFile[which(!duplicated(uniqueIndex)),]
row.names(currentRawFile)<-c(1:nrow(currentRawFile))
#Parse metabolite spectra into a list
currentRawFileSplit<-split(currentRawFile,1:nrow(currentRawFile))
spectraSplit<-lapply(currentRawFileSplit, function(a) strsplit(a[[4]]," "))
spectraSplit<-lapply(spectraSplit, function(b) lapply(b, function(c) strsplit(c,":")))
spectraSplit<-lapply(spectraSplit, function(d) t(matrix(unlist(d),nrow=2)))
spectraSplit<-lapply(spectraSplit, function(d) d[order(d[,1]),])
spectraSplit<-lapply(spectraSplit, function(d) apply(d,2,as.numeric))
#CalcSims
SimilarityScores<-mclapply(spectraSplit, function(e) lapply(FAMESspectraSplit, function(d) ((e[,2]%*%d[,2])/(sqrt(sum(e[,2]*e[,2]))*sqrt(sum(d[,2]*d[,2]))))*100), mc.cores=numCores)
SimilarityMatrix<-matrix(unlist(SimilarityScores), nrow=nrow(FAMES))
#Calculate pairwise RT penalties for each current file metabolite and seed file metabolites
RT1Index<-matrix(unlist(lapply(currentRawFile[,6],function(x) abs(x-FAMES[,4])*RT1Penalty)),nrow=nrow(FAMES))
RT2Index<-matrix(unlist(lapply(currentRawFile[,7],function(x) abs(x-FAMES[,5])*RT2Penalty)),nrow=nrow(FAMES))
SimilarityMatrix<-SimilarityMatrix-RT1Index-RT2Index
if(sum(apply(SimilarityMatrix,1,max)<85)>1){
message(paste0("Potential Problem Match: ", FAMES[which(apply(SimilarityMatrix,1,max)<similarityCutoffWarningThreshold),1], "  "))
}
currentRawFile[apply(SimilarityMatrix,1,which.max),1]<-as.character(FAMES[,1])
write.table(currentRawFile[,c(1:5)], paste0(File,"_FAME_appended.txt"),sep="\t",row.names=F,quote=F)
}
File<-inputFileList[1]
currentRawFile<-read.table(File, sep="\t", fill=T, quote="",strip.white = T, stringsAsFactors = F,header=T)
currentRawFile[,4]<-as.character(currentRawFile[,4])
currentRawFile<-currentRawFile[which(!is.na(currentRawFile[,3])&nchar(currentRawFile[,4])!=0),]
currentRawFile[,2]<-as.character(currentRawFile[,2])
#Parse retention times
RTSplit<-data.frame(strsplit(currentRawFile[,2], " , "), stringsAsFactors = F)
RTSplit[1,]<-gsub("\"", "", RTSplit[1,])
RTSplit[2,]<-gsub("\"", "", RTSplit[2,])
currentRawFile[,"RT1"]<-as.numeric(t(RTSplit[1,]))
currentRawFile[,"RT2"]<-as.numeric(t(RTSplit[2,]))
#Remove identical metabolite rows
uniqueIndex<-data.frame(paste(currentRawFile[,1], currentRawFile[,2], currentRawFile[,3]))
currentRawFile<-currentRawFile[which(!duplicated(uniqueIndex)),]
row.names(currentRawFile)<-c(1:nrow(currentRawFile))
#Parse metabolite spectra into a list
currentRawFileSplit<-split(currentRawFile,1:nrow(currentRawFile))
spectraSplit<-lapply(currentRawFileSplit, function(a) strsplit(a[[4]]," "))
spectraSplit<-lapply(spectraSplit, function(b) lapply(b, function(c) strsplit(c,":")))
spectraSplit<-lapply(spectraSplit, function(d) t(matrix(unlist(d),nrow=2)))
spectraSplit<-lapply(spectraSplit, function(d) d[order(d[,1]),])
spectraSplit<-lapply(spectraSplit, function(d) apply(d,2,as.numeric))
#CalcSims
SimilarityScores<-mclapply(spectraSplit, function(e) lapply(FAMESspectraSplit, function(d) ((e[,2]%*%d[,2])/(sqrt(sum(e[,2]*e[,2]))*sqrt(sum(d[,2]*d[,2]))))*100), mc.cores=numCores)
SimilarityMatrix<-matrix(unlist(SimilarityScores), nrow=nrow(FAMES))
#Calculate pairwise RT penalties for each current file metabolite and seed file metabolites
RT1Index<-matrix(unlist(lapply(currentRawFile[,6],function(x) abs(x-FAMES[,4])*RT1Penalty)),nrow=nrow(FAMES))
RT2Index<-matrix(unlist(lapply(currentRawFile[,7],function(x) abs(x-FAMES[,5])*RT2Penalty)),nrow=nrow(FAMES))
SimilarityMatrix<-SimilarityMatrix-RT1Index-RT2Index
apply(SimilarityMatrix,1,max)
library(CooperR2DGC)
library(CooperR2DGC)
ProblemIons<-FindProblemIons(inputFile = paste0(QuickStart_FolderPath,list.files(QuickStart_FolderPath)[1]), numCores = 8)
QuickStart_FolderPath<-"~/Downloads/R2DGC_QuickStart/"
ProblemIons<-FindProblemIons(inputFile = paste0(QuickStart_FolderPath,list.files(QuickStart_FolderPath)[1]), numCores = 8)
Find_FAME_Standards(inputFileList = paste0(QuickStart_FolderPath,list.files(QuickStart_FolderPath)), numCores = 8)
Find_FAME_Standards(inputFileList = paste0(QuickStart_FolderPath,list.files(QuickStart_FolderPath)), numCores = 8)
paste0(QuickStart_FolderPath,list.files(QuickStart_FolderPath)[grep("FAME_appended",list.files(QuickStart_FolderPath))])
PeaksToCompress<-PrecompressFiles(inputFileList=paste0(QuickStart_FolderPath,list.files(QuickStart_FolderPath)[grep("FAME_appended",list.files(QuickStart_FolderPath))]), numCores=8, outputFiles=TRUE, commonIons = ProblemIons[,1])
data("StandardLibrary_030117")
Alignment<-ConsensusAlign(inputFileList = paste0(QuickStart_FolderPath,list.files(QuickStart_FolderPath)[grep("_Processed",list.files(QuickStart_FolderPath))]), numCores = 4,standardLibrary = StandardLibrary_030117,RT1_Standards = paste("FAME_", seq(8,24,2), sep=""),commonIons = ProblemIons[,1])
AlignmentTable<-Alignment$AlignmentMatrix
dim(AlignmentTable)
sum(is.na(AlignmentTable)/length(AlignmentTable))
PeakInfoTable<-Alignment$MetaboliteInfo
sum(gsub("^.+_","",PeakInfoTable[,1])>50)
library(CooperR2DGC)
