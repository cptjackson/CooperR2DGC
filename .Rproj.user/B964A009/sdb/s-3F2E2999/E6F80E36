{
    "collab_server" : "",
    "contents" : "#' Scans over a list of input files and annotates FAME standards\n#'\n#' @param inputFileList Vector of file paths to scan for FAME standards\n#' @param FAME_frame A parsed FAME standard reference file (find at system.file(\"extdata\", \"FIND_FAME_FRAME.txt\", package=\"CooperR2DGC\"))\n#' @param numCores The number of cores to use for parallel processing. Defaults to 1\n#' @param RT1Penalty Penalty used for first retention time errors.  Defaults to 1.\n#' @param RT2Penalty Penalty used for first retention time errors.  Defaults to 10.\n#' @param similarityCutoffWarningThreshold Similarity score threshold at which to print a warning for user to double check FAME peak for a sample. Defaults to 85.\n\n#' @return Will write out new files with properly annotated FAME standards with the extention _FAME_appended.txt added to the end of the file path\n#' @import parallel\n#' @export\n\n\nFind_FAME_Standards<-function(inputFileList, FAME_Frame=system.file(\"extdata\", \"FIND_FAME_FRAME.txt\", package=\"CooperR2DGC\"), numCores=4, RT1Penalty=1, RT2Penalty=10, similarityCutoffWarningThreshold=85){\n  FAMES<-read.table(FAME_Frame,sep=\"\\t\",header=T)\n  FAMES[,2]<-as.character(FAMES[,2])\n  RTSplit<-data.frame(strsplit(FAMES[,2], \" , \"), stringsAsFactors = F)\n  RTSplit[1,]<-gsub(\"\\\"\", \"\", RTSplit[1,])\n  RTSplit[2,]<-gsub(\"\\\"\", \"\", RTSplit[2,])\n  FAMES[,\"RT1\"]<-as.numeric(t(RTSplit[1,]))\n  FAMES[,\"RT2\"]<-as.numeric(t(RTSplit[2,]))\n  FAMES[,3]<-as.character(FAMES[,3])\n\n  FAMESFileSplit<-split(FAMES,1:nrow(FAMES))\n  FAMESspectraSplit<-lapply(FAMESFileSplit, function(a) strsplit(a[[3]],\" \"))\n  FAMESspectraSplit<-lapply(FAMESspectraSplit, function(b) lapply(b, function(c) strsplit(c,\":\")))\n  FAMESspectraSplit<-lapply(FAMESspectraSplit, function(d) t(matrix(unlist(d),nrow=2)))\n  FAMESspectraSplit<-lapply(FAMESspectraSplit, function(d) d[order(d[,1]),])\n  FAMESspectraSplit<-lapply(FAMESspectraSplit, function(d) apply(d,2,as.numeric))\n\n  for(File in inputFileList){\n    print(File)\n    currentRawFile<-read.table(File, sep=\"\\t\", fill=T, quote=\"\",strip.white = T, stringsAsFactors = F,header=T)\n    currentRawFile<-currentRawFile[,-4]\n    currentRawFile<- currentRawFile[,c(1,2,3,5,4)]\n    currentRawFile[,4]<-as.character(currentRawFile[,4])\n    currentRawFile<-currentRawFile[which(!is.na(currentRawFile[,3])&nchar(currentRawFile[,4])!=0),]\n    currentRawFile[,2]<-as.character(currentRawFile[,2])\n\n    #Parse retention times\n    RTSplit<-data.frame(strsplit(currentRawFile[,2], \" , \"), stringsAsFactors = F)\n    RTSplit[1,]<-gsub(\"\\\"\", \"\", RTSplit[1,])\n    RTSplit[2,]<-gsub(\"\\\"\", \"\", RTSplit[2,])\n    currentRawFile[,\"RT1\"]<-as.numeric(t(RTSplit[1,]))\n    currentRawFile[,\"RT2\"]<-as.numeric(t(RTSplit[2,]))\n\n    #Remove identical metabolite rows\n    uniqueIndex<-data.frame(paste(currentRawFile[,1], currentRawFile[,2], currentRawFile[,3]))\n    currentRawFile<-currentRawFile[which(!duplicated(uniqueIndex)),]\n    row.names(currentRawFile)<-c(1:nrow(currentRawFile))\n\n    #Parse metabolite spectra into a list\n    currentRawFileSplit<-split(currentRawFile,1:nrow(currentRawFile))\n    spectraSplit<-lapply(currentRawFileSplit, function(a) strsplit(a[[4]],\" \"))\n    spectraSplit<-lapply(spectraSplit, function(b) lapply(b, function(c) strsplit(c,\":\")))\n    spectraSplit<-lapply(spectraSplit, function(d) t(matrix(unlist(d),nrow=2)))\n    spectraSplit<-lapply(spectraSplit, function(d) d[order(d[,1]),])\n    spectraSplit<-lapply(spectraSplit, function(d) apply(d,2,as.numeric))\n\n    #CalcSims\n    SimilarityScores<-mclapply(spectraSplit, function(e) lapply(FAMESspectraSplit, function(d) ((e[,2]%*%d[,2])/(sqrt(sum(e[,2]*e[,2]))*sqrt(sum(d[,2]*d[,2]))))*100), mc.cores=numCores)\n    SimilarityMatrix<-matrix(unlist(SimilarityScores), nrow=nrow(FAMES))\n\n    #Calculate pairwise RT penalties for each current file metabolite and seed file metabolites\n    RT1Index<-matrix(unlist(lapply(currentRawFile[,6],function(x) abs(x-FAMES[,4])*RT1Penalty)),nrow=nrow(FAMES))\n    RT2Index<-matrix(unlist(lapply(currentRawFile[,7],function(x) abs(x-FAMES[,5])*RT2Penalty)),nrow=nrow(FAMES))\n    SimilarityMatrix<-SimilarityMatrix-RT1Index-RT2Index\n    if(sum(apply(SimilarityMatrix,1,max)<85)>1){\n      message(paste0(\"Potential Problem Match: \", FAMES[which(apply(SimilarityMatrix,1,max)<similarityCutoffWarningThreshold),1], \"  \"))\n    }\n    currentRawFile[apply(SimilarityMatrix,1,which.max),1]<-as.character(FAMES[,1])\n    write.table(currentRawFile[,c(1:5)], paste0(File,\"_FAME_appended.txt\"),sep=\"\\t\",row.names=F,quote=F)\n  }\n}\n",
    "created" : 1488517427731.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3699446527",
    "id" : "E6F80E36",
    "lastKnownWriteTime" : 1488517857,
    "last_content_update" : 1488517857332,
    "path" : "~/Desktop/CooperR2DGC/R/Find_FAME_Standards.R",
    "project_path" : "R/Find_FAME_Standards.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}