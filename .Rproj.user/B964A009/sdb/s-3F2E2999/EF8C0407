{
    "collab_server" : "",
    "contents" : "#' This function scans over a range of potential ions and looks for ions that are not present in any peak or are common enough to decrease alignment quality.\n#' Can use as input to the consensus align function to avoid including these ions during alignment to speed up processing time and improve alignments\n\n\n#' @param inputFile The file path of a representative chromatof file to use in searching for ions to filter\n#' @param possibleIons A numeric vector of possible ions to search. Make sure each ion listed is present in the input file. Defaults to 70 through 600.\n#' @param numCores The number of cores to use for parallel processing. Defaults to 1\n#' @param absentIonThreshold Numeric indicating the fraction of total ion intensity an ion has to greater than in at least one peak to not be filtered as an absent ion. Defaults to 0.01.\n#' @param commonIonThreshold Numeric indicating the number of standard deviations below the mean an ion has to decrease the global metabolite similarity score to be filtered as a common ion. Defaults to 2.\n#' @param plotData Boolean. If true, relative ion impact scores will be plotted.\n\n#' @return Two column data frame identifying filtered ions and the reason they were filtered (absent or common). If plotData is TRUE, plots common ion scores. Y-axis is the z-scored number of pairwise metabolite comparisons with a similarity score greater than 50. X-axis is the ion with the filtered ions labeled in red.\n#' @examples\n#' FindProblemIons(inputFile=system.file(\"extdata\", \"SampleA.txt\", package=\"CooperR2DGC\"),\n#'     possibleIons = 70:78)\n#'\n#' @import parallel\n#' @import graphics\n#' @export\n\nFindProblemIons<-function(inputFile, possibleIons=c(70:600), numCores=1, absentIonThreshold=0.01, commonIonThreshold=2, plotData=T){\n\n  #Make empty vector to store similarity score impact of dropping each ion\n  Sum50<-c()\n\n  #Read in and format input file\n  currentRawFile<-read.table(inputFile, header=T, sep=\"\\t\", fill=T, quote=\"\",strip.white = T, stringsAsFactors = F)\n  currentRawFile[,4]<-as.character(currentRawFile[,4])\n  currentRawFile<-currentRawFile[which(!is.na(currentRawFile[,3])&nchar(currentRawFile[,4])!=0),]\n  currentRawFile[,2]<-as.character(currentRawFile[,2])\n\n  #Parse retention times\n  RTSplit<-data.frame(strsplit(currentRawFile[,2], \" , \"), stringsAsFactors = F)\n  RTSplit[1,]<-gsub(\"\\\"\", \"\", RTSplit[1,])\n  RTSplit[2,]<-gsub(\"\\\"\", \"\", RTSplit[2,])\n  currentRawFile[,\"RT1\"]<-as.numeric(t(RTSplit[1,]))\n  currentRawFile[,\"RT2\"]<-as.numeric(t(RTSplit[2,]))\n\n  #Remove duplicate metabolites\n  uniqueIndex<-data.frame(paste(currentRawFile[,1], currentRawFile[,2], currentRawFile[,3]))\n  currentRawFile<-currentRawFile[which(!duplicated(uniqueIndex)),]\n  row.names(currentRawFile)<-c(1:nrow(currentRawFile))\n\n  #Parse ion spectra column into list of numeric vectors\n  currentRawFileSplit<-split(currentRawFile,1:nrow(currentRawFile))\n  spectraSplit<-lapply(currentRawFileSplit, function(a) strsplit(a[[4]],\" \"))\n  spectraSplit<-lapply(spectraSplit, function(b) lapply(b, function(c) strsplit(c,\":\")))\n  spectraSplit<-lapply(spectraSplit, function(d) t(matrix(unlist(d),nrow=2)))\n  spectraSplit<-lapply(spectraSplit, function(d) d[order(d[,1]),])\n  spectraSplit<-lapply(spectraSplit, function(d) apply(d,2,as.numeric))\n\n  #Identify absent ions\n  spectraFrame<-do.call(cbind,spectraSplit)\n  spectraFrame<-spectraFrame[,-c(seq(1,ncol(spectraFrame),2))]\n  spectraSums<-colSums(spectraFrame)\n  ionProportions<-apply(spectraFrame,1,function(x) sum((x/spectraSums)>absentIonThreshold))\n  AbsentIons<-spectraSplit[[1]][,1][which(ionProportions==0)]\n\n  #Calculate pairwise retention time comparisons\n  RT1Index<-matrix(unlist(lapply(currentRawFile[,\"RT1\"],function(x) abs(x-currentRawFile[,\"RT1\"]))),nrow=length(spectraSplit))\n  RT2Index<-matrix(unlist(lapply(currentRawFile[,\"RT2\"],function(x) abs(x-currentRawFile[,\"RT2\"])*100)),nrow=length(spectraSplit))\n\n  #Calculate change global metabolite spectral similarity after dropping each ion not previously identified as an absent ion\n  pb<- txtProgressBar(width=50, style=3)\n  for(Ion in possibleIons[!possibleIons%in%AbsentIons]){\n    setTxtProgressBar(pb, (grep(Ion, possibleIons[!possibleIons%in%AbsentIons])/length(possibleIons[!possibleIons%in%AbsentIons]))[1])\n    CommonIons<-c(Ion,AbsentIons)\n    spectraSplitMask<-lapply(spectraSplit, function(d) d[which(!d[,1]%in%CommonIons),])\n    spectraSplitMask<-lapply(spectraSplitMask, function(d) d[order(d[,1]),])\n    spectraSplitMask<-lapply(spectraSplitMask, function(d) apply(d,2,as.numeric))\n    SimilarityScores<- parallel::mclapply(spectraSplitMask, function(e) lapply(spectraSplitMask, function(d) ((e[,2]%*%d[,2])/(sqrt(sum(e[,2]*e[,2]))*sqrt(sum(d[,2]*d[,2]))))*100), mc.cores=numCores)\n    SimilarityMatrix<-matrix(unlist(SimilarityScores), nrow=length(spectraSplit))\n    SimilarityMatrix<-SimilarityMatrix-RT1Index-RT2Index\n    SimilarityMatrix[lower.tri(SimilarityMatrix, diag = T)]<-0\n    Sum50[Ion]<-sum(rowSums(SimilarityMatrix>50))\n  }\n  close(pb)\n  Sum50<-Sum50[which(!is.na(Sum50))]\n  names(Sum50)<-possibleIons[!possibleIons%in%AbsentIons]\n  ProblemIons<-possibleIons[!possibleIons%in%AbsentIons][which(scale(Sum50)<(-1*commonIonThreshold))]\n\n  #Plot commmon ion results\n  if(plotData==T){\n    graphics::plot(possibleIons[!possibleIons%in%AbsentIons],scale(Sum50), pch=16,cex=0.5, ylab=\"Sum 50 (Std. Dev.)\", xlab=\"Ion\")\n    if(length(ProblemIons)>0){\n      text(ProblemIons,scale(Sum50)[which(scale(Sum50)<(-2))], labels = ProblemIons, pos=3, cex=0.75, col=\"red\")\n    }\n  }\n\n  #Combine absent ions and common ions into a dataframe to output\n  ionsToRemove<-possibleIons[possibleIons%in%AbsentIons|possibleIons%in%ProblemIons]\n  resultFrame<-data.frame(\"Ions\"=possibleIons,Status=rep(NA,length(possibleIons)))\n  resultFrame[which(resultFrame[,1]%in%AbsentIons),2]<-\"Absent\"\n  resultFrame[which(resultFrame[,1]%in%ProblemIons),2]<-\"Common\"\n  return(resultFrame[which(!is.na(resultFrame[,2])),])\n}\n\n",
    "created" : 1488517431874.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "973490593",
    "id" : "EF8C0407",
    "lastKnownWriteTime" : 1488768328,
    "last_content_update" : 1488768328518,
    "path" : "~/Desktop/CooperR2DGC/R/FindProblemIons.R",
    "project_path" : "R/FindProblemIons.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}